// Function to validate that the message returned from SonarQube is ok
def qualityGateValidation(qg) {
  if (qg.status != 'OK') {
    // emailext body: "WARNING SANTI: Code coverage is lower than 80% in Pipeline ${BUILD_NUMBER}", subject: 'Error Sonar Scan,   Quality Gate', to: "${EMAIL_ADDRESS}"
    return true
  }
  // emailext body: "CONGRATS SANTI: Code coverage is higher than 80%  in Pipeline ${BUILD_NUMBER} - SUCCESS", subject: 'Info - Correct Pipeline', to: "${EMAIL_ADDRESS}"
  return false
}
pipeline {
  agent any

  tools {
      nodejs 'nodejs'
  }

  environment {
      // Variables globales para el pipeline
      PROJECT_ROOT = 'express-mysql/app'
      EMAIL_ADDRESS = 'kris.sandoval010@gmail.com'
      REPO_DOCKER_HUB = 'express-mysql-express_rest_api'
      REGISTRY = 'ksandoval/express-mysql-express_rest_api'
      DOCKERHUB_CREDENTIALS = credentials('dockerhub_id')
      DOCKER_IMAGE = ''
      SONAR_USER = 'admin'
      SONAR_PASS = 'cerveros2023'
  }

  stages {
      
      stage('Checkout') {
        steps {
        // Get Github repo using Github credentials (previously added to Jenkins credentials)
        checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/krisstronger/docker-pirate']]])        }
      }
      stage('Install dependencies') {
        steps {
          sh 'npm --version'
          sh "cd ${PROJECT_ROOT}; npm install"
        }
      }
      stage('Unit tests') {
        steps {
          // Run unit tests
          sh "cd ${PROJECT_ROOT}; npm run test"
        }
      }
      stage('Generate coverage report') {
        steps {
          // Run code-coverage reports
          sh "cd ${PROJECT_ROOT}; npm run coverage"
        }
      } 
        //stage 1
      stage('Scan and Analysis') {
            steps {
                script {
                    def scannerHome = tool 'sonar-scanner'
                    withSonarQubeEnv('sonarqube') {
                        sh "${scannerHome}/bin/sonar-scanner \
                          -Dsonar.projectKey=SimpleExpressExample:Test \
                          -Dsonar.projectName=SimpleExpressExample \
                          -Dsonar.projectVersion=0.0.${BUILD_NUMBER} \
                          -Dsonar.host.url=http://ec2-54-161-106-118.compute-1.amazonaws.com:9000 \
                          -Dsonar.sources=./${PROJECT_ROOT}/app.js,./${PROJECT_ROOT}/config/db.config.js,./${PROJECT_ROOT}/routes/developers.js \
                          -Dsonar.login=${SONAR_USER} \
                          -Dsonar.password=${SONAR_PASS} \
                          -Dsonar.tests=./${PROJECT_ROOT}/test \
                          -Dsonar.javascript.lcov.reportPaths=./${PROJECT_ROOT}/coverage/lcov.info"
                    }
                }
            }
      }
      //stage 2
      stage('Quality Gate Check') {
            steps {
                script {
                  sleep(10)
                    def qg = waitForQualityGate()
                    if (qg.status != "OK") {
                        error "Pipeline abortado debido a un fallo en la puerta de calidad: ${qg.status}"
                    }
                  
                  // timeout(time: 5, unit: 'MINUTES') {
                  //   def qg = waitForQualityGate()
                  //   if (qg.status != 'OK') {
                  //       error "Pipeline abortado debido a un fallo en la puerta de calidad: ${qg.status}"
                  //   }
                  // }
                }
            }
      }
      stage('Docker Build') {
        steps {
          sh "cd ./${PROJECT_ROOT};docker build -t ${REGISTRY}:${BUILD_NUMBER} . "
        }
      }
      stage('Docker Login') {
          steps {
            sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
          }
      }
      stage('Docker Push ') {
            steps {
              sh "docker push ${REGISTRY}:${BUILD_NUMBER}"
            }
      }
        

      // stage('Deploy docker-image') {
      //   steps {
      //     // If the Dockerhub authentication stopped, do it again
      //     script {
      //         DOCKER_IMAGE = docker.build REGISTRY + ":$BUILD_NUMBER"
      //         docker.withRegistry( '', REGISTRY_DOCKER_CREDENTIAL ) {
      //         DOCKER_IMAGE.push()
      //       }
      //     }
      //     // sh "docker tag ${REPO_DOCKER_HUB} ${REGISTRY}:${BUILD_NUMBER}"
      //     // sh "echo $BUILD_NUMBER"
      //     // sh "docker push ${REGISTRY}:${BUILD_NUMBER}"
      //   }
      // }

      stage('Remove Unused docker image') {
        steps{
          sh "docker rmi $REGISTRY:$BUILD_NUMBER"
        }
      }

  }
}
